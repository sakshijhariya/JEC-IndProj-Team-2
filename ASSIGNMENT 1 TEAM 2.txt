                                                                 INDUSTRIAL PROJECT REPORT
                                                                      (Assignment – 1)


!! Jabalpur Engineering college, Jabalpur !!


Project: Peer-to-Peer group based file sharing system
Project start date: 1 august 2021
Duration: 3 months
Submitted by: Team 2
 

Contents
----------

1)	Assignment-1 Objectives
1.1	Create simple client server program in C++ (Client sends members names one by one and after every client send, server replies with ‘Hi <membernamesent>).
1.2	Running c/c++ programs in Linux.
1.3	Learned about socket programming.
1.4	Learned about file handling.
1.5	Learned about threads.
 
2)	Methodology
    2.1 learned linux commands.
1.learned about shell(missing sem.)- textual interface by which we can take full advantages of comp. tools.
  1.A. using shell.
      a. ex> gunjan1132:~$
        gunjan1132 - it is machine name / current directory.
        ~ - means home.
        $ - not a root user.
        / - roots ( \ for windows and etc).
      
      b. $PATH - give lists of all directories searched for given command.
 
      c. which - give the file in which commands details kept.
    
    B. navigating a shell.
      a. pwd - present working directory.
      b. cd - change direct.
      c. "." - current direct.
      d. ".." - parent direct.
      e. ls - ( what is in that direct.?) list all contents in it.
      d. -h or --help - will list help texts. ex> ls -h or ls --help >> will list all info about this commands.
      f. -l - use a long listing format .
          ex> $ ls -l /home =>> drwx-xr-x 1 gunjan1132 gunjan1132 4765 aug 2 2021 gunjan1132
              d - tells tht gunjan1132 is directory.
rwx- r- what permissions the owner of file (gunjan1132[1]) ; w- wht perm. the owning grp (gunjan1132[2]) ; x- and wht perm. and everyone else.
              "-" -given principle dosnt have given permission .
               x - search
               r - read and lists its contents. 
      g. mv - to rename /move file
      h. cp - to copy a file.
      i. mkdir - to make a new directory.
 
2.2 Socket programming
SOCKET : A socket is an object similar to a file that allows a program to accept incoming connections,
           make outgoing connections, and send and receive data.
           Before two machines can communicate, both must create a socket object. 

  1. SOCKET PROGRAMMING

* Procedure in Client-Server Communication:
* Socket: Create a new communication
* Bind: Attach a local address to a socket
* Listen: Announce willingness to accept connections
* Accept: Block caller until a connection request arrives
* Connect: Actively attempt to establish a connection
* Send: Send some data over a connection
* Receive: Receive some data over a connection
* Close: Release the connection

  2. Stages for Server: Socket Creation

* Int socketcr = socket( domain , type, protocol )
* Socketcr = It is like a descriptor ,an integer (file handle)
* Domain = integer type, communication domain, example = AF_INET6 (IPv6 protocol)
* Type = communication type
* SOCK_DGRAM: UDP(unreliable, connectionless)
* Protocol = Protocol value for Internet Protocol(IP), which is 0. 

* Setsockopt:  int setsockopt(int sockfd, int level, int optname,  
                   const void *optval, socklen_t optlen);
               This helps in manipulating options for the socket referred by the file descriptor sockfd. 

* Bind : int bind(int sockfd, const struct sockaddr *addr, 
                          socklen_t addrlen);
         After creation of the socket, bind function binds the socket to the address 
         and port number specified in addr(custom data structure). 

* Listen: int listen(int sockfd, int backlog);
          It puts the server socket in a passive mode, where it waits for the client
          to approach the server to make a connection. 

* Accept: int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
          It extracts the first connection request on the queue of pending connections
          for the listening socket, sockfd, creates a new connected socket, 
          and returns a new file descriptor referring to that socket. 

  3. Stages for Client

* Socket connection: Exactly same as that of server’s socket creation
* Connect:
  int connect(int sockfd, const struct sockaddr *addr,  
                             socklen_t addrlen);

* CONNECTION : A relationship between two machines, 
                 where two pieces of software know about each other.
 
2.3 File handling
1.learned about file handling 
  A. mainly perfomed by - read,write,open,lseek and close funcs.
  B. POSIX- portable operating system interface
  C. file deciptors - non -ve integers alloted to file.
  D. UNIX system shell consist of 
      a) file descriptor 0 - std. input of proccesses     | STDIN_FILENO        
      b) file descriptor 1 - std. output of proccesses   | STDOUT_FILENO 
      c) file descriptor 2 - std. errors of proccesses    |STDERR_FILENO
 *these descriptors r defined in <unistd.h>  header file.

  E. for cpp -> header file to include-> <fstream>
	it have 3 classes:
	a) fstreambase 
	b) ifstream (derived from fstreambase)
	c) ofstream (derived form fstreambase) 

  F. open,write and read file.
     a) OPEN - 1) through constructor. (class_name xyz("file name.txt");)
	       2) through open function.(class_name object_name;
					object_name.open("file name.txt"); )  
  G. write operation:
    a) using constructor:
     ofstream out("file name.txt");
     string s;
     cin>>s;
     out<<s;
    b) using open func.:
     ofstream out;
     out.open("file name.txt");
     string s;
     cin>>s;
     out<<s; 
  
  H. read operation:
    a) using constructor:
     ifstream in("file name.txt");
     string s;
     in>>s;
     cout<<s;
    b) using open func.:
     ifstream in;
     in.open("file name.txt");
     string s;
     in>>s;
     cout<<s;      
        
2. file opening modes.
   a. ios :: in 	=> input/read
   b. ios :: out            => output/write    => it will erase the previous data and start with new data to resolve this we use append to update it.
   c. ios :: app            => append
   d. ios :: ate            => update
   e. ios :: binary       => binary
# in binary mode \n will print as it is but in text mode it will decode \n to new line.
# we can use different modes at same time.
  ex. ofstream fout;
        fout.open("file.txt", ios::app | ios::binary);

3. tellg() and tellp() pre defined function.
                 
tellg()	    
tellp()
    - tells the position of character to read.        	- tells the position of character to write.
- call in input stream.                                   	- call in input stream.                                   
-	streampos tellg();                                       	- streampos tellp();  
  


4. seekg() and seekp()
   seekg() :-
    - defined in ifstream class.
    - its prototype is :-
       istream&seekg(streampos pos);
      or istream&seekg(streamoff off, ios_base::seekdir way);
      * pos = is new absolute position within the stream.
      * off = offset value, relative to the way parameter.
      * way = ios_base::beg , ios_base::cur or  ios_base::end.
          ex> obj.seekg(position).
seekp() :-
- defined in ofstream class.
same arguments and paramerters as in seekg().

# lseek is for low level commands like POSIX.
   fseek is used for c libraries.
   seekg and seekp are used for cpp .

 
2.4 Threads and Thread controls
•	Threading control blocks.
The Thread Control Block acts as a library of information about the threads in a system.
•	Specific information is stored in the thread control block highlighting important information about each process.

•	 In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independent by a scheduler, which is typically a part of the operating system.

•	The implementation of thread and processes differs between operating systems, but in most cases a thread is a component of a process 
The multiple threads of a given process may be executed concurrently sharing resources such as memory, while resource. 

•	In particular, the threads of a process share its executable code and the values of its dynamically allocated variables and non-thread-local global variable at any given time.


•	 Multitasking is of two types:

~Processor based and thread based.
~ Processor based multitasking is totally managed by the OS, however multitasking through multithreading can be controlled by the programmer to some extent.

•	The concept of multi-threading needs proper understanding of these two terms- a process and a thread.

•	 A process is a program being executed. A process can be further divided into independent units known as threads.
•	Multithreading Models Some operating system provide a combined user level thread and Kernel level thread facilit.
•	 Solaris is a good example of this combined approach.

•	In a combined system, multiple threads within the same application can run in parallel on multiple processors and a blocking system call need not block the entire process

•	Multithreading models are three types.

Many to many relationship
Many to one relationship 
One to one relationship Thread Local Storage .
 
  3 Result and Conclusions

After learning some basics commands , learned about socket programming , file handling and threads.
Created a simple client server program in c/c++ with the help of learnings of socket programming-
In server: client sends member’s names one by one and after every client , server sends a hi message.
Learned how to read ,write and open a file and its working functions.
 
4	References
1.	Socket programming – GeeksforGeeks socket programming.
2.	File handling  - chapter 3 (file I/o) Advanced Programming in the       UNIX Environment, 3rd Edition.
3.	Threads and Thread controls – chapter 11 & 12 Advanced         Programming in the UNIX Environment, 3rd Edition.
